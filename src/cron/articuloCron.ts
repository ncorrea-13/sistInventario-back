import cron from 'node-cron';
import { prisma } from '../prismaClient';
import { calcularModeloIntervaloFijo } from '../servicios/modeloServicio';

export const ejecutarRevisi√≥nIntervaloFijo = async () => {
  try {
    console.log('‚è∞ Ejecutando revisi√≥n del modelo de intervalo fijo...');

    const modelos = await prisma.modeloInvFijo.findMany({
      include: {
        articulo: {
          include: {
            proveedorArticulos: true,
          },
        },
      },
    });

    console.log(`üì¶ Se encontraron ${modelos.length} art√≠culos con modelo de intervalo fijo.`);

    for (const modelo of modelos) {
      const { articulo } = modelo;
      const proveedorPredeterminado = articulo.proveedorArticulos.find(p => p.predeterminado);

      if (!proveedorPredeterminado) {
        console.warn(`‚ùå No se encontr√≥ proveedor predeterminado para el art√≠culo ${articulo.codArticulo}`);
        continue;
      }

      const ocExistente = await prisma.ordenCompra.findFirst({
        where: {
          detalles: {
            some: {
              articuloId: articulo.codArticulo,
            },
          },
          ordenEstado: {
            nombreEstadoOrden: {
              in: ['pendiente', 'enviada'],
            },
          },
        },
      });

      if (ocExistente) {
        console.log(`üîÅ Ya existe OC activa para art√≠culo ${articulo.codArticulo}`);
        continue;
      }

      const intervaloTiempo = modelo.intervaloTiempo;
      const intervaloActual = modelo.tiempoActual;

      if (intervaloActual != 0) {
        console.warn(`Hoy no es d√≠a de revisi√≥n del art√≠culo ${articulo.codArticulo}`);
        await prisma.modeloInvFijo.update({
          where: { id: modelo.id },
          data: { tiempoActual: intervaloActual - 1 },
        });
        continue;
      } else {
        await prisma.modeloInvFijo.update({
          where: { id: modelo.id },
          data: { tiempoActual: intervaloTiempo },
        });
      }

      const tiempoEntrega = proveedorPredeterminado.demoraEntrega;

      const calculo = calcularModeloIntervaloFijo({
        demandaAnual: articulo.demandaAnual,
        desviacionDemandaT: articulo.desviacionDemandaT,
        nivelServicioDeseado: articulo.nivelServicioDeseado,
        intervaloTiempo,
        tiempoEntrega,
        stockActual: articulo.stockActual,
      });

      const cantidadSugerida = Math.max(1, Math.round(calculo.inventarioMaximo - articulo.stockActual));

      await prisma.ordenCompra.create({
        data: {
          tamanoLote: cantidadSugerida,
          montoOrden: articulo.costoCompra * cantidadSugerida,
          proveedorId: proveedorPredeterminado.proveedorId,
          ordenEstadoId: 1,
          detalles: {
            create: [
              {
                articuloId: articulo.codArticulo,
              },
            ],
          },
        },
      });

      console.log(`‚úÖ OC creada para art√≠culo ${articulo.nombreArticulo}`);
    }
  } catch (error) {
    console.error('‚ùå Error al ejecutar el cron:', error);
  }
};

// ‚è∞ Este es el cron programado autom√°ticamente (mantener para producci√≥n)
cron.schedule('0 2 * * *', ejecutarRevisi√≥nIntervaloFijo);